<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Bibek's Digital Garden</title>
  <atom:link href="https://bpanthi.com.np/braindump/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://bpanthi.com.np/braindump/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 22 Nov 2024 15:14:04 -0600</pubDate>
  <lastBuildDate>Fri, 22 Nov 2024 15:14:04 -0600</lastBuildDate>
  <generator>Emacs 29.4 Org-mode 9.7.11</generator>
  <webMaster>bpanthi977@gmail.com (Bibek Panthi)</webMaster>
  <image>
    <url>https://bpanthi977.github.io/braindump/data/rss.png</url>
    <title>Bibek's Digital Garden</title>
    <link>https://bpanthi.com.np/braindump/</link>
  </image>

  <item>
    <title>Debugging C with DAP in Emacs</title>
    <link>https://bpanthi.com.np/braindump/debugging_c_with_dap_in_emacs.html</link>
    <author>bpanthi977@gmail.com (Bibek Panthi)</author>
    <guid isPermaLink="false">https://bpanthi.com.np/braindump/debugging_c_with_dap_in_emacs.html</guid>
    <pubDate>Thu, 14 Nov 2024 22:30:00 -0600</pubDate>

    <description><![CDATA[<p>
    Debug Adapter Protocol (DAP) is a protocol in the spirit of LSP, for unifing debugger features and interfaces.
    </p>

    <p>
    <code>dap-mode</code> in Emacs provides the necessary ui for Emacs to connect with debuggers. And for any laguage it can connect to the language specific debugger if we configure it properly.
    </p>

    <p>
    Many such configuration (called <code>debug-provider</code>) are bundled with <code>dap-mode</code>. For C &amp; C++, I use <code>dap-codelldb</code>. A <code>debug-provider</code> has a name and provides a function that populates the <code>dap</code> startup parameters. Usually the provider populates the debugger program location, server port and other similar stuff.  For example the dap-codelldb registers a debug-provider named "lldb".
    </p>

    <details open><summary><span class='org-details-collapse'>&lt; Collapse code block</span><span class='org-details-expand'>&gt; Expand code block</span></summary>
    <div class="org-src-container">
    <pre class="src src-elisp">(dap-register-debug-provider
    <span class="org-string">"lldb"</span>
    (<span class="org-keyword">lambda</span> (conf)
    (<span class="org-keyword">let</span> ((debug-port (dap--find-available-port)))
    (plist-put conf <span class="org-builtin">:program-to-start</span> (format <span class="org-string">"%s --port %s"</span> dap-codelldb-debug-program debug-port))
    (plist-put conf <span class="org-builtin">:debugServer</span> debug-port))
    (plist-put conf <span class="org-builtin">:host</span> <span class="org-string">"localhost"</span>)
    (plist-put conf <span class="org-builtin">:type</span> <span class="org-string">"lldb"</span>)
    (plist-put conf <span class="org-builtin">:cargo</span> <span class="org-string">""</span>)
    conf))
    </pre>
    </div></details>

    <p>
    For any project we might need to debug muliple program, it is the purpose of <code>debug-template</code> to specify other parameters such as <code>:program</code>, <code>:cwd</code> (working direction) and program arguments. Instead of defining debug-template in elisp, dap also supports <code>.vscode/launch.json</code> format used by VSCode. A sample launch.json is as follows [See <a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes">this</a> for launch.json format and <a href="https://code.visualstudio.com/docs/editor/variables-reference">this</a> for variables supported in launch.json]:
    </p>

    <details open><summary><span class='org-details-collapse'>&lt; Collapse code block</span><span class='org-details-expand'>&gt; Expand code block</span></summary>
    <div class="org-src-container">
    <pre class="src src-json">{
    <span class="org-keyword">"version"</span>: <span class="org-string">"0.2.0"</span>,
    <span class="org-keyword">"configurations"</span>: [
    {
    <span class="org-keyword">"name"</span>: <span class="org-string">"Debug main program"</span>,
    <span class="org-keyword">"type"</span>: <span class="org-string">"lldb"</span>,
    <span class="org-keyword">"request"</span>: <span class="org-string">"launch"</span>,
    <span class="org-keyword">"program"</span>: <span class="org-string">"${workspaceFolder}/out/main"</span>,
    <span class="org-keyword">"args"</span>: [],
    <span class="org-keyword">"stopAtEntry"</span>: <span class="org-constant">false</span>,
    <span class="org-keyword">"cwd"</span>: <span class="org-string">"${workspaceFolder}"</span>,
    <span class="org-keyword">"environment"</span>: [],
    <span class="org-keyword">"externalConsole"</span>: <span class="org-constant">false</span>
    }
    ]
    }
    </pre>
    </div></details>

    <p>
    Or you can specify the same template in elisp. Note that the dap-variables (like "workspaceFolder", "fileDirname", "env:" etc. See <a href="https://code.visualstudio.com/docs/editor/variables-reference">code.visualstudio.com</a>) are exapanded properly by dap (see <code>dap-variables-expand</code> for implementation)
    </p>

    <details open><summary><span class='org-details-collapse'>&lt; Collapse code block</span><span class='org-details-expand'>&gt; Expand code block</span></summary>
    <div class="org-src-container">
    <pre class="src src-elisp">(dap-register-debug-template <span class="org-string">"Debug main"</span>
    (list <span class="org-builtin">:type</span> <span class="org-string">"lldb"</span>
    <span class="org-builtin">:program</span> <span class="org-string">"${workspaceFolder}/out/main"</span>
    <span class="org-builtin">:cwd</span> <span class="org-string">"${workspaceFolder}"</span>
    <span class="org-builtin">:request</span> <span class="org-string">"launch"</span>))
    </pre>
    </div></details>
    <div id="outline-container-ID-63D0012C-CA2F-413F-9876-A638C9A9FDE8" class="outline-3">
    <h3 id="ID-63D0012C-CA2F-413F-9876-A638C9A9FDE8">Installation</h3>
    <div class="outline-text-3" id="text-Installation">
    <ol class="org-ol">
    <li><code>M-x package-install dap-mode</code> : Install dap-mode</li>
    <li><code>(require 'dap-codelldb)</code> : Load the <code>dap-codelldb</code> provider (it is bundled with dap-mode)</li>
    <li><code>M-x dap-codelldb-setup</code> : Install the debug server program</li>
    </ol>
    </div>
    </div>
    ]]></description>
</item>
<item>
  <title>N:M implementation of POSIX Threads API</title>
  <link>https://bpanthi.com.np/braindump/n_m_implementation_of_posix_threads_api.html</link>
  <author>bpanthi977@gmail.com (Bibek Panthi)</author>
  <guid isPermaLink="false">https://bpanthi.com.np/braindump/n_m_implementation_of_posix_threads_api.html</guid>
  <pubDate>Wed, 13 Nov 2024 13:57:00 -0600</pubDate>

  <description><![CDATA[<p>
  I was reading through the pthreads man page (<a href="https://man7.org/linux/man-pages/man7/pthreads.7.html">https://man7.org/linux/man-pages/man7/pthreads.7.html</a>) trying to understand how pthreads is implemented. For linux, pthreads library can be thought of as a wrapper over the kernel syscalls (`clone` and `futex`). The manual goes on to talk about the NPTL implementation which is a 1:1 implementation i.e. it uses 1 kernel thread for each pthread-created-thread.
  </p>

  <p>
  This raises, I believe, a natural question, that could there be any implementation of pthreads, perhaps in other operating system, that uses a different scheme (N:1 or N:M). i.e. could multiple pthread-created-threads be run by a single (or multiple) kernel threads by using cooperative multitasking or other techniques in user space.
  </p>

  <p>
  I am aware of Green Threads (also known as coroutines, or user space threads) and have played a little with coroutines in the Go programming language. I have also found that such concept exist in other languages like Erlang, Elixir. So, the question is not that whether N:1 is possible, but whether
  </p>
  <ol class="org-ol">
  <li>if such implementation would still be POSIX Thread specification compliant.</li>
  <li>And if so, are there any attempts for that in C language.</li>
  </ol>

  <p>
  I believe the answer to 1 is Yes. (Also indicated by Thread Implementation Models section in <a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/threads.html">https://pubs.opengroup.org/onlinepubs/7908799/xsh/threads.html</a>).
  As for 2, I couldn't find any such implementation by searching on the internet.
  </p>

  <p>
  The following is the excerpt from the pthreads manual that triggered the above thought.
  </p>
  <blockquote>
  <p>
  Linux implementations of POSIX threads
  Over time, two threading implementations have been provided by
  the GNU C library on Linux:
  </p>

  <p>
  LinuxThreads
  This is the original Pthreads implementation. Since glibc
  2.4, this implementation is no longer supported.
  </p>

  <p>
  NPTL (Native POSIX Threads Library)
  This is the modern Pthreads implementation. By comparison
  with LinuxThreads, NPTL provides closer conformance to the
  requirements of the POSIX.1 specification and better
  performance when creating large numbers of threads. NPTL
  is available since glibc 2.3.2, and requires features that
  are present in the Linux 2.6 kernel.
  </p>

  <p>
  Both of these are so-called 1:1 implementations, meaning that
  each thread maps to a kernel scheduling entity. Both threading
  implementations employ the Linux clone(2) system call. In NPTL,
  thread synchronization primitives (mutexes, thread joining, and
  so on) are implemented using the Linux futex(2) system call.
  </p>
  </blockquote>
  ]]></description>
</item>
<item>
  <title>Archive completed tasks in Org mode</title>
  <link>https://bpanthi.com.np/braindump/archive_completed_tasks_in_org_mode.html</link>
  <author>bpanthi977@gmail.com (Bibek Panthi)</author>
  <guid isPermaLink="false">https://bpanthi.com.np/braindump/archive_completed_tasks_in_org_mode.html</guid>
  <pubDate>Wed, 13 Nov 2024 13:59:00 -0600</pubDate>

  <description><![CDATA[<p>
  You might have a tasks.org file where all your todos and timekeeping is placed. After a while the file gets really big and thus you need to archive the old entries that are either completed or cancelled. Here are the commands (which I found from <a href="https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command">stackoverflow.com</a>) to clean up your tasks file:
  </p>

  <p>
  For achiving only one heading
  </p>

  <ol class="org-ol">
  <li>C-c C-x A</li>
  </ol>

  <p>
  For archiving headings in bulk
  </p>
  <ol class="org-ol">
  <li>M-m o a t r (Open agenda view for the buffer)
  <ul class="org-ul">
  <li>M-m o a (Opens Agenda)</li>
  <li>&lt; (Narrows down to this buffer)</li>
  <li>t (Shows TODO entries)</li>
  </ul></li>
  <li>2 r (Show all DONE entries)</li>
  <li>m (Mark for bulk action)</li>
  <li>B A (Bulk Archive)
  <ul class="org-ul">
  <li>B (Bulk action on marked entries)</li>
  <li>A (Archive the entries)</li>
  </ul></li>
  </ol>
  ]]></description>
</item>
<item>
  <title>Named Destinations</title>
  <link>https://bpanthi.com.np/braindump/pdfs.html</link>
  <author>bpanthi977@gmail.com (Bibek Panthi)</author>
  <guid isPermaLink="false">https://bpanthi.com.np/braindump/pdfs.html</guid>
  <pubDate>Fri, 22 Nov 2024 15:12:00 -0600</pubDate>

  <description><![CDATA[<div id="outline-container-ID-B254904F-7860-48BB-894F-E487D97DD31B" class="outline-3">
  <h3 id="ID-B254904F-7860-48BB-894F-E487D97DD31B">Named Destinations</h3>
  <div class="outline-text-3" id="text-Named-Destinations">
  <p>
  Used for referencing/linking parts of another pdf document
  </p>

  <p>
  To list named destinations in a pdf: <a href="https://unix.stackexchange.com/questions/246622/list-named-destinations-in-a-pdf">stackexchange.com</a>
  </p>

  <pre class="example">
  pdfinfo -dests ./abcd.pdf
  </pre>



  <p>
  To link to a named destination use the url: <a href="https://superuser.com/questions/1384892/how-to-create-url-link-to-the-specific-section-of-the-pdf-file">superuser.com</a>
  </p>

  <pre class="example">
  ./abcd.pdf#named_destination
  </pre>



  <p>
  To link to a specific page, use the url:
  </p>

  <pre class="example">
  ./abcd.pdf#page=12
  </pre>
  </div>
  </div>
  ]]></description>
</item>
</channel>
</rss>
